{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/04/03/tapable-SyncLoopHook/","webpackCompilationHash":"4e76112e90763e5c5515","result":{"data":{"markdownRemark":{"html":"<h1>前言</h1>\n<p><strong>玩<code class=\"language-text\">webpack</code>的都知道,<code class=\"language-text\">webpack</code>把各个插件串联起来的核心是<code class=\"language-text\">tapable</code>,而<code class=\"language-text\">tapable</code>里面有很多<code class=\"language-text\">*hook</code>函数,其中有一个不常用,但是却很好玩的钩子函数叫 <code class=\"language-text\">SyncLoopHook</code>, 于是我就自己实现了一遍, 然后想去和网友对比一下实现的不同。谁知道,网上很多<code class=\"language-text\">SyncLoopHook</code>函数的实现都是一样的,而且还是错的 😱</strong></p>\n<h1>网上普遍的SyncLoopHook 😮</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SyncLoopHook</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>task</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> ret<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                ret <span class=\"token operator\">=</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>网上大部分都是这样实现的, 这样写只是把<code class=\"language-text\">return</code>非<code class=\"language-text\">undefind</code>的回调函数循环执行</p>\n<hr>\n<p>如下图, 第一个回调函数执行了两遍,没问题</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2019/04/03/1.png\"><img src=\"http://119.23.54.204/static/xyd_image/2019/04/03/1.png\"></a></p>\n<p>但是把<code class=\"language-text\">return</code>放到第二个之后的就会出错了,它只是把第二个回调函数执行两次</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2019/04/03/2.png\"><img src=\"http://119.23.54.204/static/xyd_image/2019/04/03/2.png\"></a></p>\n<p>而<code class=\"language-text\">tapable</code>里的<code class=\"language-text\">SyncLoopHook</code>是把包括<code class=\"language-text\">return</code>非<code class=\"language-text\">undefined</code>的回调函数和该回调函数之前的回调函数都循环一遍, 如下图</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2019/04/03/3.png\"><img src=\"http://119.23.54.204/static/xyd_image/2019/04/03/3.png\"></a></p>\n<h1>我的SyncLoopHook 😯</h1>\n<p>注意 : SyncLoopHook只能有一次循环, 如果不对, 请及时告诉我</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SyncLoopHook</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">tap</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">call</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> ret<span class=\"token punctuation\">,</span>\n            alreadyLoop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>  <span class=\"token comment\">// 是否已经循环了</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">baton<span class=\"token punctuation\">,</span> task</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            baton<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n            \n            <span class=\"token comment\">// 判断最新一个回调函数的返回值</span>\n            ret <span class=\"token operator\">=</span> baton<span class=\"token punctuation\">[</span>baton<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n            \n            <span class=\"token comment\">// 如果返回值为undefined 且 如果已经循环了, 返回[], 如果还没循环, 返回包含上一个回调的baton</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> alreadyLoop <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> baton\n            \n            <span class=\"token comment\">// 如果不是undefine,遍历baton并检测最后一个回调函数的返回值,直到为undefined</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> ret <span class=\"token operator\">=</span> baton<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token comment\">// 代码执行到这里,证明已经循环了</span>\n            alreadyLoop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        \n            <span class=\"token comment\">// 已经循环了,清空baton</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2019/04/03/4.png\"><img src=\"http://119.23.54.204/static/xyd_image/2019/04/03/4.png\"></a></p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2019/04/03/5.png\"><img src=\"http://119.23.54.204/static/xyd_image/2019/04/03/5.png\"></a></p>\n<hr>\n<h1>总结</h1>\n<p>有时候网上的东西也不能全信,还是要自己写一遍才行~</p>","frontmatter":{"mainTitle":"真假 SyncLoophook 💀","date":"03 April, 2019","cover_image":{"publicURL":"/static/webpack-362a5f580df72a6b4064d0c7d6b91811.jpg"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/04/03/tapable-SyncLoopHook/"}}}