{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/12/14/iterator-in-javascript/","webpackCompilationHash":"0925914ec746f272ab75","result":{"data":{"markdownRemark":{"html":"<p>开门见山地说:</p>\n<ul>\n<li>这篇文章只是聊一下<code class=\"language-text\">iterator</code>的基础知识</li>\n<li>如果想全面了解<code class=\"language-text\">iterator</code>是什么东西,可以点这 [ <a href=\"http://es6.ruanyifeng.com/#docs/iterator\">阮一峰老师的ES6入门</a> ]</li>\n</ul>\n<h2>Iterator是什么 ? 有什么用 ?</h2>\n<p>Iterator是什么?</p>\n<p><code class=\"language-text\">Iterator</code>是一个提供给各种数据结构访问的统一接口, 简单来说 , <code class=\"language-text\">iterator</code>就是一个接口 😑</p>\n<p>使用<code class=\"language-text\">iterator</code>主要有三个作用</p>\n<ul>\n<li>为一些数据结构 <code class=\"language-text\">Map,Set,Array,String...</code> 提供一个统一的简便的访问接口</li>\n<li>使数据结构的成员按顺序排序,可以通过 <code class=\"language-text\">next</code> 关键字按顺序访问数据结构的数据</li>\n<li>供 <code class=\"language-text\">for...of</code> 遍历消费 (主要)</li>\n</ul>\n<h2>Iterator怎么用 ?</h2>\n<p><strong>重点在这 🔞 : 所有的遍历器 <code class=\"language-text\">iterator</code> 都是从名为 <code class=\"language-text\">[Symbol.iterator]</code> 的接口(方法)开始出发的, 然后调用 <code class=\"language-text\">next</code> 方法按顺序输出数据</strong> </p>\n<p>PS : 上面说到了 <code class=\"language-text\">[Symbol.iterator]</code> <code class=\"language-text\">next</code> , 那什么是 <code class=\"language-text\">[Symbol.iterator]</code>? 什么是 <code class=\"language-text\">next</code>?</p>\n<ul>\n<li>\n<p>什么是 <code class=\"language-text\">[Symbol.iterator]</code></p>\n<ul>\n<li><code class=\"language-text\">[Symbol.iterator]</code>是启动遍历器的开关, 如果没有这个开关, 就不存在遍历器 </li>\n<li><code class=\"language-text\">[Symbol.iterator]</code>分为先天的和后天的</li>\n</ul>\n</li>\n</ul>\n<p>首先 , 先天的<code class=\"language-text\">[Symbol.iterator]</code>存在在一些特殊的数据结构中, 包括 <code class=\"language-text\">Array</code> <code class=\"language-text\">String</code> <code class=\"language-text\">Map</code> <code class=\"language-text\">Set</code> <code class=\"language-text\">TypedArray</code> <code class=\"language-text\">arguments</code> <code class=\"language-text\">NodeList(dom)</code> <code class=\"language-text\">GeneratorObject</code>等等, 如下图所示 👇</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/12/14/1.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/12/14/1.png\"></a></p>\n<p>看到没, 就是这个东西, 在我说的那几个数据结构中都有, 不信的可以自己一个一个去试试</p>\n<p>但是, 不知道有没有发现, 我们最常用的 <code class=\"language-text\">Object</code> 是没有 <code class=\"language-text\">[Symbol.iterator]</code>接口的 👇</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/12/14/2.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/12/14/2.png\"></a></p>\n<p>所以 <code class=\"language-text\">Object</code> 是不能使用 <code class=\"language-text\">for...of</code> 进行遍历的 👇</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/12/14/3.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/12/14/3.png\"></a></p>\n<p>虽然 <code class=\"language-text\">Object</code> 有很多方法可以遍历, 但是产品经理就要你用 <code class=\"language-text\">for ... of</code> 遍历 <code class=\"language-text\">Object</code> 🙇 , 怎么办, 这就要说到后天的 <code class=\"language-text\">[Symbol.iterator]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> val <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">Object</code> 不是没有 <code class=\"language-text\">[Symbol.iterator]</code> 方法吗, 我们自己加一个不就行了 👇</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/12/14/4.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/12/14/4.png\"></a></p>\n<p>看 ! 现在 <code class=\"language-text\">obj</code> 是可遍历的了 ( 这里的错误先不管, 后面会说到 )</p>\n<ul>\n<li>什么是 <code class=\"language-text\">next</code></li>\n</ul>\n<p>上面说过 <code class=\"language-text\">iterator</code> 从 <code class=\"language-text\">[Symbol.iterator]</code> 开始, 通过 <code class=\"language-text\">next</code> 按顺序输出数据, 所以, 我们来看一下从 <code class=\"language-text\">[Symbol.iterator]</code> 出发后的是什么东西 👇</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/12/14/5.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/12/14/5.png\"></a></p>\n<p>可以很清楚的看到, <code class=\"language-text\">[Symbol.iterator]</code> 执行后会返回一个包含 <code class=\"language-text\">next</code> 方法的对象</p>\n<p>所以 , <code class=\"language-text\">next</code> 就是由 <code class=\"language-text\">[Symbol.iterator]</code> 执行后返回的一个方法, 下面我们来执行一下<code class=\"language-text\">next</code> 👇</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/12/14/6.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/12/14/6.png\"></a></p>\n<p>每次执行 <code class=\"language-text\">next</code> 都会返回一个对象 <code class=\"language-text\">{value: xxx, done: xxx}</code></p>\n<p><code class=\"language-text\">value</code>为遍历的数据结构的每一位, <code class=\"language-text\">done</code> 表示是否完成遍历</p>\n<p>现在我们可以完善一下上面的错误了</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">next</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> isContinue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isContinue<span class=\"token punctuation\">)</span> \n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> \n                        value <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`数字 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span> \n                        done <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> \n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> val <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>结果是这个 👇</p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/12/14/7.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/12/14/7.png\"></a></p>\n<p>ber ~ 这样对象就算没有 <code class=\"language-text\">[Symbol.iterator]</code> 接口也可以使用 <code class=\"language-text\">for ... of</code> 去遍历了</p>\n<hr>\n<ul>\n<li>什么是 <code class=\"language-text\">for ... of</code></li>\n</ul>\n<p>一直在用 <code class=\"language-text\">for ... of</code>, 顺带提一嘴, <code class=\"language-text\">for ... of</code>是什么玩意</p>\n<p><code class=\"language-text\">for ... of</code>是<code class=\"language-text\">ES6</code>的一个新遍历的方法, 且只能遍历具有 <code class=\"language-text\">iterator</code> 接口的数据结构, 也就是要有 <code class=\"language-text\">[Symbol.iterator]</code>, 至于这个遍历有什么好处, 大家可自行百度一下</p>\n<h1>总结</h1>\n<p>所有的遍历器 <code class=\"language-text\">iterator</code> 都是从名为 <code class=\"language-text\">[Symbol.iterator]</code> 的接口(方法)开始出发的, 然后调用 <code class=\"language-text\">next</code> 方法按顺序输出数据</p>","frontmatter":{"mainTitle":"iterator是什么,怎么玩 😵","date":"14 December, 2018","cover_image":{"publicURL":"/static/javascript-211a317d88d16a36875b0ba4b5e4ec85.jpg"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018/12/14/iterator-in-javascript/"}}}