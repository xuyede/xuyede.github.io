{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/08/26/this-in-javascript/","webpackCompilationHash":"5b86cec8407722dc0489","result":{"data":{"markdownRemark":{"html":"<p>一般说到JS的<code class=\"language-text\">this</code>，都会想起在函数中变来变去的<code class=\"language-text\">this</code>。但是事情的发生都是有规则的约束，JS中的<code class=\"language-text\">this</code>也不例外，下面我们来看一下JS中<code class=\"language-text\">this</code>指向的规则 📄</p>\n<h2>在JS中，有四条规则影响着this的指向</h2>\n<ol>\n<li>默认指向：对于一个函数，如果没有被打点调用，则该函数里的<code class=\"language-text\">this</code>指向全局 <code class=\"language-text\">window</code></li>\n<li>隐式指向：对于一个函数，如果被打点调用，则该函数里的<code class=\"language-text\">this</code>指向调用该函数的对象</li>\n<li>显式指向：通过<code class=\"language-text\">call，apply，bind</code>改变函数里的<code class=\"language-text\">this</code>指向</li>\n<li>\n<p><code class=\"language-text\">new</code>一个对象：构造函数的<code class=\"language-text\">this</code>指向该实例化对象</p>\n<h5>优先级为: 4 > 3 > 2 > 1</h5>\n</li>\n</ol>\n<h3>一 、默认指向</h3>\n<p>-> 对于一个函数，如果没有被打点调用，则该函数里的this指向全局 <code class=\"language-text\">window</code></p>\n<h4>1)先看一个30km/h的小例子 🚲</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">showAge</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my age is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/1.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/1.png\"></a>\n运行的结果为 <code class=\"language-text\">my age is : 18</code></p>\n<p>其实这也是符合默认指向这个规则的，在这个小例子中，<code class=\"language-text\">showAge</code>函数在执行的时候并没有被打点调用<code class=\"language-text\">×××.showAge()</code>，所以<code class=\"language-text\">showAge</code>函数里面的<code class=\"language-text\">this</code>指向全局<code class=\"language-text\">window</code>，即<code class=\"language-text\">this.age</code>就是全局的<code class=\"language-text\">age</code>为18。</p>\n<p>可能有人会有疑问，为什么不是打印100呢。首先要清楚的一点是，在这个小例子中，打印的是<code class=\"language-text\">this.age</code>而不是<code class=\"language-text\">age</code>，所以要到<code class=\"language-text\">this</code>指向的对象上找<code class=\"language-text\">age</code>,而不是单纯地去找<code class=\"language-text\">age</code>这个变量，如果改成<code class=\"language-text\">console.log(&#39;my age is: &#39; + age)</code>，打印的就是100了。</p>\n<h4>2)再来一个60km/h的小例子 🚕</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age <span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">showAge</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my age is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'请稍等300毫秒'</span>；\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/2.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/2.png\"></a>\n运行的结果为<code class=\"language-text\">my age is : 18</code></p>\n<p>嗯？？？为什么还是18？？？其实把函数执行的位置捋清楚也是符合规则的。\n首先，<code class=\"language-text\">showAge</code>函数定义在一个对象中，里面有个定时器<code class=\"language-text\">setTimeout</code>，定时器等待300毫秒后执行打印操作，这应该没问题。\n然后，在外面执行<code class=\"language-text\">obj.showAge()</code>，打点调用<code class=\"language-text\">obj</code>里的<code class=\"language-text\">showAge</code>方法，所以<code class=\"language-text\">showAge</code>里的<code class=\"language-text\">this</code>指向<code class=\"language-text\">obj</code>，但是，我们要操作的语句是在定时器<code class=\"language-text\">setTimeout</code>里面的函数里的，所以我们可以粗略地模拟一下这个函数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setTimeout</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>好了，大概就是这样子~~\n我们可以看出，在定时器中，作为回调函数的<code class=\"language-text\">callback</code>只是单纯地在符合条件后执行了，那么，这里的<code class=\"language-text\">callback</code>函数是不是没有被谁打点调用，所以该函数的<code class=\"language-text\">this</code>应该指向全局对象<code class=\"language-text\">window</code>。所以打印的就是全局的<code class=\"language-text\">age</code>,等于18。</p>\n<p>同时也可以得到一个普遍的结论：一般的回调函数的this指向全局对象<code class=\"language-text\">window</code></p>\n<h3>二、隐式指向</h3>\n<p>-> 对于一个函数，如果被打点调用，则该函数里的this指向调用该函数的对象</p>\n<h4>1)先看一个30kn/h的例子 🚲</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age <span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">showAge</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my age is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/3.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/3.png\"></a></p>\n<p>运行结果是<code class=\"language-text\">my age is: 100</code></p>\n<p>由<code class=\"language-text\">obj.showAge()</code>可以看出，函数<code class=\"language-text\">showAge</code>被<code class=\"language-text\">obj</code>这个对象调用，所以<code class=\"language-text\">showAge</code>函数里面的<code class=\"language-text\">this</code> 指向<code class=\"language-text\">obj</code>这个对象\n所以你也可以把<code class=\"language-text\">showAge</code>函数的执行语句理解为<code class=\"language-text\">console.log(&#39;my age is: &#39; + obj.age)</code>，所以打印的就是对象<code class=\"language-text\">obj</code>上的<code class=\"language-text\">age</code>，为100。</p>\n<h4>2)再来一个60km/h的例子 🚕</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age <span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">showAge</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my age is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age <span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">showAge</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj2<span class=\"token punctuation\">.</span>showAge <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">.</span>showAge<span class=\"token punctuation\">;</span>\nobj2<span class=\"token punctuation\">.</span><span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/4.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/4.png\"></a></p>\n<p>运行结果是<code class=\"language-text\">my age is: 100</code></p>\n<p>首先，执行<code class=\"language-text\">obj2.showAge = obj1.showAge</code>，把<code class=\"language-text\">obj1</code>的<code class=\"language-text\">showAge</code>函数的引用给<code class=\"language-text\">obj2</code>的<code class=\"language-text\">showAge</code>，所以<code class=\"language-text\">obj2</code>的<code class=\"language-text\">showAge</code>的执行内容就变成了<code class=\"language-text\">obj1</code>的<code class=\"language-text\">showAge</code>内容\n然后执行<code class=\"language-text\">obj2.showAge()</code>，<code class=\"language-text\">shoeAge</code>的<code class=\"language-text\">this</code>指向<code class=\"language-text\">obj2</code>，所以打印的是<code class=\"language-text\">obj2</code>的age，为100。</p>\n<h3>三、显示指向</h3>\n<p>-> 通过call，apply，bind改变函数里的this指向</p>\n<p>先简单说一下<code class=\"language-text\">call</code> <code class=\"language-text\">apply</code> <code class=\"language-text\">bind</code> 的作用和使用方法\n<code class=\"language-text\">call</code> <code class=\"language-text\">apply</code> 都是改变一个函数的this指向并执行该函数，区别是传参列表不同，<code class=\"language-text\">call(obj, 参数1, 参数2, ...)</code> <code class=\"language-text\">apply(obj, arguments)</code>\n<code class=\"language-text\">bind</code>是改变一个函数的this指向并返回一个新的函数，传参结合<code class=\"language-text\">call</code>和<code class=\"language-text\">apply</code>的，只接收第一次绑定的this</p>\n<h4>1）先来一个30km/h的例子 🚲</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age <span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">showAge</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my age is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age <span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">showAge</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//apply效果一样</span>\n\n<span class=\"token comment\">//var func = obj.showAge.bind(newObj);  //拿个变量接收bind方法执行后返回的新函数</span>\n<span class=\"token comment\">//func();  //结果和call apply相同</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/5.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/5.png\"></a></p>\n<p>运行结果是：<code class=\"language-text\">my age is: 18</code></p>\n<p>首先，执行语句从左往右看，调用<code class=\"language-text\">obj</code>对象中的<code class=\"language-text\">showAge</code>方法，然后使用<code class=\"language-text\">call</code>方法改变<code class=\"language-text\">showAge</code>方法中的<code class=\"language-text\">this</code>为<code class=\"language-text\">newObj</code>对象。所以，<code class=\"language-text\">showAge</code>函数里的执行语句可以理解为<code class=\"language-text\">console.log(&#39;my age is: &#39; + newObj.age)</code>，所以打印的是<code class=\"language-text\">newObj</code>里的<code class=\"language-text\">age</code>，为18。</p>\n<h4>2)剖析一下call改变this的原理，车速100km/h 🚄</h4>\n<p>虽然知道<code class=\"language-text\">call</code>(<code class=\"language-text\">apply</code> <code class=\"language-text\">bind</code> 不做解释，有兴趣的可以看完<code class=\"language-text\">call</code>的原理后自己尝试还原)能改变一个函数this的指向，那么它里面是怎样操作然后改变一个函数的this指向的呢？</p>\n<p>首先，在隐式指向中我们知道，对于一个函数，如果被打点调用，则该函数里的this指向调用该函数的对象，那么我们就可以利用这点来模拟一下<code class=\"language-text\">call</code>方法</p>\n<p>在原型链上编写，模拟就要真实一点~~</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//保证不污染原对象</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ctx <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      ctx <span class=\"token operator\">=</span> window<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">var</span> arg <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//保存函数的实参列表</span>\n      len <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>  \n      args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n\n  ctx<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//从实参列表的第一位开始遍历，因为第零位为指向的上下文</span>\n      args<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arg['</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//遍历完后 args = [ 'arg[1]', 'arg[2]', ...]</span>\n\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'ctx.fn('</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//上述语句可理解为 eval('ctx.fn(arg[1], arg[2], ...)')</span>\n\n  <span class=\"token keyword\">delete</span> ctx<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/6.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/6.png\"></a></p>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/7.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/7.png\"></a></p>\n<p>运行结果依旧为<code class=\"language-text\">my age is: 18</code></p>\n<p>首先，从结果看，<code class=\"language-text\">myCall</code>函数没有问题，然后我们来分析一下函数里面到底主要干了些啥 (整体思路见代码注释)</p>\n<p>①通过<code class=\"language-text\">ctx.fn = this</code>把调用<code class=\"language-text\">myCall</code>的函数变为目标上下文的一个方法，由此可以改变<code class=\"language-text\">fn</code>方法的<code class=\"language-text\">this</code>为目标上下文，也就是调用<code class=\"language-text\">myCall</code>的函数的<code class=\"language-text\">this</code>指向了目标上下文</p>\n<p>②把调用<code class=\"language-text\">myCall</code>的函数的参数整合，通过<code class=\"language-text\">eval</code>方法把字符串解析为脚本并执行</p>\n<p>好了，整体思路就是如此，这块不懂也没关系，我们主要讲的是改变this的指向~</p>\n<h3>四、通过new实例化一个对象(主要讲解this问题，构造函数知识不做过多概述)</h3>\n<p>-> 构造函数的this指向该实例化对象</p>\n<h4>1)先来一个30km/h的例子 🚲</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">introduceYourself</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'and I\\'m '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token string\">' years old.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xuyede'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">introduceYourself</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/8.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/8.png\"></a></p>\n<p>运行结果为<code class=\"language-text\">my name is xuyede and I&#39;m 18 years old.</code></p>\n<p>为了更好地让大家理解，我们可以把<code class=\"language-text\">new Person()</code>的过程分成4个步骤理解 (当然不是真的是这个过程，只是为了让大家能理解<code class=\"language-text\">new</code>的过程，稍后会揭晓真的过程~)</p>\n<p>①在<code class=\"language-text\">Person</code>函数里面的第一行隐式生成一个对象 <code class=\"language-text\">var this = {}</code>\n②让该<code class=\"language-text\">this</code>的原型指向该函数的原型 <code class=\"language-text\">this.__proto__ = Person.prototype</code>\n③执行 <code class=\"language-text\">this.xxx = xxx</code>\n④在函数最后一行把这个<code class=\"language-text\">this</code>返回出去</p>\n<p>所以，你可以理解为变量<code class=\"language-text\">person</code>拿到了构造函数里面<code class=\"language-text\">this</code>的引用，所以<code class=\"language-text\">person</code>可以使用在构造函数里设置在<code class=\"language-text\">this</code>上的值</p>\n<p>构造函数还涉及原型、原型链的知识，在这里就不过多阐述这方面的知识</p>\n<h4>2)剖析一下new这个东西到底干了什么，车速180km/h 🚀</h4>\n<p>话不多说，上代码~~~</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//把实参列表的第一位截取出来，获得构造函数</span>\n  <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//声明一个上下文，原型为构造函数的原型</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//执行该构造函数，并改变构造函数的this为instance</span>\n  <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//返回这个上下文</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://119.23.54.204/static/xyd_image/2018/08/26/9.png\"><img src=\"http://119.23.54.204/static/xyd_image/2018/08/26/9.png\"></a></p>\n<h1>总结</h1>\n<p><strong>在<code class=\"language-text\">javascript</code>里面的<code class=\"language-text\">this</code>,只要记住规则就很容易地理解 🙌.当学习的深入,会接触到箭头函数,那时候就不会被<code class=\"language-text\">this</code>搞得头昏眼花</strong>\n</p>","frontmatter":{"mainTitle":"JavaScript中的this怎么玩 ❓","date":"26 August, 2018","cover_image":{"publicURL":"/static/javascript-294b5831d20b88c8185c4f6509ab8d1a.jpg"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018/08/26/this-in-javascript/"}}}